* Programmer :  Stanley Yee 
 * Course     :  CS211S 
 * Assignment :  #4 version 2 
 * Instructor :  Abbas Moghtanei 
 * Date       :  05/06/13 
 * Objective  :  Part of DrawingBoard. 
 *               Main Description:   
 *               This program adds the ability to draw line, circle,  
 *               rectangle, and polygon to drawing board. DrawingBoard also 
 *               allows the user to save and load drawings, clear the 
 *               drawing board, change the color of the pointer, erase part 
 *               of drawing and change the brush point as a string. 
 *                
 *               This part of the program calls DrawingBoard in a thread. 
 */  
 
import javax.swing.SwingUtilities; 
 
//*************************** DrawingBoardDemo **************************** 
public class DrawingBoardDemo 
{ 
    public static void main(String args[]) 
    { 
        SwingUtilities.invokeLater(new Runnable() 
        { 
            public void run() 
            { 
                new DrawingBoard(); 
            } 
        }); 
    } 
} 
Page Break 
/** 
 ** Class DrawingBoard 
 * Programmer :  Stanley Yee 
 * Course     :  CS211S 
 * Assignment :  #4 version 2 
 * Instructor :  Abbas Moghtanei 
 * Date       :  05/06/13 
 * Objective  :  Part of DrawingBoard. 
 *               Main Description:   
 *                This program adds the ability to draw line, circle,  
 *               rectangle, and polygon to drawing board. DrawingBoard also 
 *               allows the user to save and load drawings, clear the 
 *               drawing board, change the color of the pointer, erase part 
 *               of drawing and change the brush point as a string. 
 *                
 *               This part of the program sets up the buttons and drawing 
 *               board area. 
 */  
 
import java.awt.*; 
import java.awt.event.*; 
import javax.swing.*; 
import javax.swing.filechooser.FileNameExtensionFilter; 
 
import java.io.*; 
 
//**************************** DrawingBoard ******************************* 
public class DrawingBoard extends JFrame implements ActionListener 
{ 
    JButton saveB, loadB, clearB, colorB, drawB, eraseB, brushB;    
    JButton lineB, ovalB, rectangleB, polygonB, fillB; 
    JLabel panelT, spacerL, spacerR, shapeLabel, spacer2, spacer3, spacer4; 
    JPanel labelPanel, buttonPanel, buttonPanelShape, drawPanel; 
     
    int shape=1;  // line=1, oval=2, rectangle=3, polygon=4, eraser=5, brush=6 
    boolean fill=false; 
     
    Color clrC;  
    DrawArea da; 
     
    //************************** DrawingBoard() *************************** 
    public DrawingBoard() 
    { 
        setTitle("Drawing Board"); 
        setSize(900, 600); 
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); 
         
        DisplayTitle(); 
        DrawButtons(); 
        ShapeButtons(); 
 
        da = new DrawArea(); 
         
        setLayout(new BorderLayout()); 
        add(labelPanel, BorderLayout.NORTH); 
        add(buttonPanelShape, BorderLayout.WEST); 
        add(da, BorderLayout.CENTER); 
        add(buttonPanel, BorderLayout.SOUTH); 
        setVisible(true); 
    } 
 
    //************************** DisplayTitle() *************************** 
    public void DisplayTitle() 
    { 
        panelT = new JLabel ("Drawing Board", JLabel.CENTER); 
        panelT.setForeground(Color.BLUE); 
        panelT.setFont(new Font("Gisha", Font.BOLD, 32)); 
        labelPanel = new JPanel(); 
        labelPanel.add(panelT); 
    } 
     
    //************************** DrawButtons() **************************** 
    public void DrawButtons() 
    { 
        saveB = new JButton("Save"); 
        saveB.setToolTipText("Save drawing to a file"); 
        loadB = new JButton("Load"); 
        loadB.setToolTipText("Load drawing from a file"); 
        clearB = new JButton("Clear"); 
        clearB.setToolTipText("Clear drawing board"); 
        colorB = new JButton("Color"); 
        colorB.setToolTipText("Choose different brush color"); 
        eraseB = new JButton("Eraser"); 
        eraseB.setToolTipText("Set eraser"); 
        brushB = new JButton("Brush"); 
        brushB.setToolTipText("Change brush head string"); 
         
        spacerL = new JLabel(" "); 
        spacerR = new JLabel(" "); 
         
        saveB.addActionListener(this); 
        loadB.addActionListener(this); 
        clearB.addActionListener(this); 
        colorB.addActionListener(this); 
        eraseB.addActionListener(this); 
        brushB.addActionListener(this); 
         
        buttonPanel = new JPanel(); 
        buttonPanel.setLayout(new GridLayout(1,8, 10, 10)); 
        buttonPanel.add(spacerL); buttonPanel.add(saveB);  
        buttonPanel.add(loadB); buttonPanel.add(clearB); 
        buttonPanel.add(colorB); buttonPanel.add(eraseB);  
        buttonPanel.add(brushB); buttonPanel.add(spacerR); 
    } 
     
    public void ShapeButtons() 
    { 
        lineB = new JButton("Line"); 
        lineB.setToolTipText("Click and drag to draw a line"); 
        ovalB = new JButton("Oval"); 
        ovalB.setToolTipText("Click and drag to draw an oval"); 
        rectangleB = new JButton("Rectangle"); 
        rectangleB.setToolTipText("Click and drag to draw an rectangle"); 
        polygonB = new JButton("Polygon"); 
        polygonB.setToolTipText("Click polygon points. Double click last point"); 
        fillB = new JButton("Fill"); 
        fillB.setToolTipText("Toggles between fill and unfill"); 
         
 
         
        shapeLabel = new JLabel("       Brush"); 
        shapeLabel.setFont(new Font("SansSerif", Font.PLAIN, 12)); 
        shapeLabel.setForeground(Color.GRAY); 
        spacer2 = new JLabel("  "); 
        spacer3 = new JLabel("  "); 
        spacer4 = new JLabel("  "); 
         
        lineB.addActionListener(this); 
        ovalB.addActionListener(this); 
        rectangleB.addActionListener(this); 
        polygonB.addActionListener(this); 
        fillB.addActionListener(this); 
 
        buttonPanelShape = new JPanel(); 
        buttonPanelShape.setLayout(new GridLayout(9,1, 0, 25)); 
        buttonPanelShape.add(shapeLabel); buttonPanelShape.add(lineB);  
        buttonPanelShape.add(ovalB); buttonPanelShape.add(rectangleB);  
        buttonPanelShape.add(polygonB); buttonPanelShape.add(fillB); 
        buttonPanelShape.add(spacer2); buttonPanelShape.add(spacer3);  
        buttonPanelShape.add(spacer4); 
    } 
     
    //*********************** actionPerformed() ************************* 
    public void actionPerformed(ActionEvent ae) 
    { 
        if (ae.getSource()==saveB)  
        { 
            JFileChooser fc = new JFileChooser(); 
            FileNameExtensionFilter filter =  
                  new FileNameExtensionFilter("Serializable Documents", "scr"); 
            fc.setFileFilter(filter); 
            int returnVal = fc.showSaveDialog(DrawingBoard.this); 
 
            if (returnVal == JFileChooser.APPROVE_OPTION)  
            { 
                File file = fc.getSelectedFile(); 
                String filePath = file.getPath(); 
                if(!filePath.toLowerCase().endsWith(".scr")) 
                    file = new File(filePath + ".scr"); 
                da.SaveSerial(file); 
            } 
        } 
        else if (ae.getSource()==loadB)  
        { 
            JFileChooser fc = new JFileChooser(); 
            FileNameExtensionFilter filter =  
                  new FileNameExtensionFilter("Serializable Documents", "scr"); 
            fc.setFileFilter(filter); 
            int returnVal = fc.showOpenDialog(DrawingBoard.this); 
 
            if (returnVal == JFileChooser.APPROVE_OPTION)  
            { 
                File file = fc.getSelectedFile(); 
                da.LoadSerial(file); 
            } 
        } 
        else if (ae.getSource()==clearB)  
        { 
            if (eraseB.getText().equals("Draw")) 
            { 
                eraseB.setText("Eraser"); 
                currentMode(da.getShape()); 
                da.setErase(false); 
            } 
            da.setClear(); 
        } 
        else if (ae.getSource()==colorB)  
        { 
            clrC=JColorChooser.showDialog(this, "title", Color.BLACK); 
            da.setColor(clrC); 
        } 
        else if (ae.getSource()==eraseB)  
        { 
            if (eraseB.getText().equals("Eraser")) 
            { 
                eraseB.setText("Draw"); 
                currentMode(5); 
                da.setErase(true); 
            } 
            else  
            { 
                eraseB.setText("Eraser"); 
                currentMode(da.getShape()); 
                da.setErase(false); 
            } 
        } 
        else if (ae.getSource()==lineB) 
        { 
            if (eraseB.getText().equals("Draw")) eraseB.setText("Eraser"); 
            currentMode(1); 
            da.setShape(1); 
        } 
        else if (ae.getSource()==ovalB) 
        { 
            if (eraseB.getText().equals("Draw")) eraseB.setText("Eraser"); 
            currentMode(2); 
            da.setShape(2); 
        } 
        else if (ae.getSource()==rectangleB) 
        { 
            if (eraseB.getText().equals("Draw")) eraseB.setText("Eraser"); 
            currentMode(3); 
            da.setShape(3); 
        } 
        else if (ae.getSource()==polygonB) 
        { 
            if (eraseB.getText().equals("Draw")) eraseB.setText("Eraser"); 
            currentMode(4); 
            da.setShape(4); 
        } 
        else if (ae.getSource()==fillB) 
        { 
            if (fillB.getText().equals("Fill")) 
            { 
                fillB.setText("UnFill"); 
                da.setFill(true); 
            } 
            else  
            { 
                fillB.setText("Fill"); 
                da.setFill(false); 
            } 
        } 
 
        else 
        { 
            currentMode(6); 
            if (eraseB.getText().equals("Draw")) eraseB.setText("Eraser"); 
            String str = JOptionPane.showInputDialog("Enter String Brush Point"); 
            da.setBrushPoint(str); 
        } 
 
        repaint(); 
    } 
     
    public void currentMode(int m) 
    { 
        int mode; 
        mode = m; 
        System.out.println("shape:" + mode); 
        switch (mode) 
        { 
            case 1: shapeLabel.setText("       Line"); break; 
            case 2: shapeLabel.setText("       Oval"); break; 
            case 3: shapeLabel.setText("       Rectangle"); break; 
            case 4: shapeLabel.setText("       Polygon"); break; 
            case 5: shapeLabel.setText("       Eraser"); break; 
            default: shapeLabel.setText("       Brush"); 
        } 
    } 
} 
Page Break 
/** 
 ** Class DrawArea 
 * Programmer :  Stanley Yee 
 * Course     :  CS211S 
 * Assignment :  #4 version 2 
 * Instructor :  Abbas Moghtanei 
 * Date       :  05/06/13 
 * Objective  :  Part of DrawingBoard. 
 *               Tracks the mouse and draws on the board based on mouse drag and  
 *               location on the drawing board and draws the picture to JPanel. 
 */  
 
import javax.swing.*; 
import java.awt.*; 
import java.awt.event.*; 
import java.util.*; 
import java.io.*; 
 
//********************************* DrawArea ********************************* 
class DrawArea extends JPanel implements MouseListener, MouseMotionListener 
{ 
    private final Color BCKGRND_COLOR = Color.WHITE;   // set background color 
    private final int ERASER_SIZE = 8;                 // size of eraser head 
     
    private int x, x1, x2; 
    private int y, y1, y2; 
     
    private int shapeDraw=6; 
    private int shapeHold; 
    private boolean fill=false; 
    private String brushP="*"; 
    private ArrayList<Point> points = new ArrayList<Point>(); 
     
    private Color clrUse, clrTmp; 
     
    private ArrayList<DrawPointsObj> shapesDPO = new ArrayList<>(); 
     
    // ***************************** DrawArea() ****************************** 
    public DrawArea() 
    { 
        addMouseListener(this); 
        addMouseMotionListener(this); 
        this.setBackground(BCKGRND_COLOR); 
         
        // setting defaults for variables 
        clrUse = clrTmp = Color.BLACK; 
    } 
     
    // ************************* paintComponent() **************************** 
    public void paintComponent(Graphics g) 
    { 
        super.paintComponent(g);  
 
        drawStoredShapes(g); 
        drawScreenItems(g); 
    } 
 
    // ************************** mouseClicked() ***************************** 
    public void mouseClicked(MouseEvent event) 
    { 
        if(event.getClickCount()==2) 
        { 
            if(shapeDraw==4) 
            { 
                x=event.getX();  
                y=event.getY();  
                Point p = new Point(x,y); 
                points.add(p); 
 
                DrawPointsObj dpo = new DrawPointsObj(fill, points, clrUse,  
                                                      shapeDraw, brushP); 
                shapesDPO.add(dpo); 
                points.clear(); 
                repaint(); 
            } 
        } 
    } 
     
    // ************************ mousePressed() ******************************* 
    public void mousePressed(MouseEvent event) 
    { 
        clrUse = clrTmp; 
        if(shapeDraw==1 || shapeDraw==2 || shapeDraw==3) points.clear(); 
        x=event.getX();  
        y=event.getY();  
        Point p = new Point(x,y); 
        points.add(p); 
         
        if(shapeDraw==5 || shapeDraw==6) 
        { 
            DrawPointsObj dpo = new DrawPointsObj(true, points, clrUse,  
                                                  shapeDraw, brushP); 
            shapesDPO.add(dpo); 
            points.clear(); 
        } 
        repaint(); 
    } 
 
 
    // ************************** mouseDragged() ****************************** 
    public void mouseDragged(MouseEvent event) 
    { 
        x=event.getX();  
        y=event.getY();  
 
        if(shapeDraw==5 || shapeDraw==6) 
        { 
            Point p = new Point(x,y); 
            points.add(p); 
                 
            DrawPointsObj dpo = new DrawPointsObj(true, points, clrUse,  
                                                  shapeDraw, brushP); 
            shapesDPO.add(dpo); 
            points.clear(); 
        } 
        repaint(); 
    } 
     
    // ************************* mouseReleased() ****************************** 
    public void mouseReleased(MouseEvent event) 
    { 
        switch(shapeDraw) 
        { 
            case 1: case 2: case 3: 
            { 
                x=event.getX();  
                y=event.getY();  
                 
                Point p = new Point(x,y); 
                points.add(p); 
 
                DrawPointsObj dpo = new DrawPointsObj(fill, points, clrUse,  
                                                      shapeDraw, brushP); 
                shapesDPO.add(dpo); 
                points.clear(); 
            } 
            break; 
            case 4: 
            { 
                //  add every point 
                x=event.getX();  
                y=event.getY();  
                 
                Point p = new Point(x,y); 
                points.add(p); 
            } 
            break; 
            default: {} 
        } 
        repaint(); 
    } 
 
    // ********************** unused mouse listeners ************************** 
    public void mouseMoved(MouseEvent event) {} 
    public void mouseEntered(MouseEvent event) {} 
    public void mouseExited(MouseEvent event) {}     
 
    // *************************** SaveSerial() ******************************* 
    public void SaveSerial(File ff) 
    { 
        try 
        { 
            FileOutputStream fos = new FileOutputStream(ff); 
            ObjectOutputStream oos = new ObjectOutputStream(fos); 
            oos.writeObject(shapesDPO); 
            oos.flush(); 
            oos.close(); 
        }catch(IOException e){} 
    } 
     
    // *************************** LoadSerial() ******************************* 
    @SuppressWarnings("unchecked") 
    public void LoadSerial(File ff) 
    { 
        try 
        { 
            FileInputStream fis = new FileInputStream(ff); 
            ObjectInputStream ois = new ObjectInputStream(fis); 
            shapesDPO =  
               (ArrayList<DrawPointsObj>)ois.readObject(); 
            ois.close(); 
        }catch(IOException | ClassNotFoundException e){} 
        repaint(); 
    } 
     
    // **************************** setColor() ******************************** 
    public void setColor(Color c) 
    { 
        clrTmp = c; 
    } 
     
    // **************************** setClear() ******************************** 
    public void setClear() 
    { 
        shapesDPO.clear(); 
    } 
     
 
    // ***************************** setShape() *******************************     
    public void setShape(int sh) 
    { 
        shapeDraw = sh; 
    } 
     
    // ***************************** getShape() ******************************* 
    public int getShape() 
    { 
        return(shapeHold); 
    } 
     
    // ***************************** setFill() ******************************** 
    public void setFill(boolean fi) 
    { 
        fill = fi; 
    } 
     
    // ************************** setBrushPoint() ***************************** 
    public void setBrushPoint(String s) 
    { 
        brushP = s; 
        shapeDraw = 6; 
    } 
     
     
    public void setErase(boolean Erase) 
    { 
        if(Erase)  
        { 
            shapeHold = shapeDraw; 
            shapeDraw = 5; 
        } 
        else shapeDraw =shapeHold; 
    } 
     
    // **************************** settingXY() ******************************* 
    public void settingXY(int xx0, int yy0, int xx1, int yy1) 
    { 
        if(xx1>xx0)  
        { 
            x1 = xx0; x2 = xx1;  
        } 
        else  
        { 
            x1 = xx1; x2 = xx0; 
        } 
        if(yy1>yy0)  
        { 
            y1 = yy0; y2 = yy1; 
        } 
        else  
        { 
            y1 = yy1; y2 = yy0; 
        } 
    } 
     
    // ************************ drawStoredShapes() ***************************** 
    public void drawStoredShapes(Graphics g) 
    { 
        if(shapesDPO.size() > 0 ) 
        { 
            for(DrawPointsObj p : shapesDPO) 
            { 
                g.setColor(p.getColor()); 
                switch(p.getShape()) 
                { 
                    case 1:     // draw line 
                    { 
                        g.drawLine((int)p.getPoint().get(0).getX(),  
                                   (int)p.getPoint().get(0).getY(),  
                                   (int)p.getPoint().get(1).getX(), 
                                   (int)p.getPoint().get(1).getY()); 
                    }  
                    break; 
                    case 2:     // draw oval 
                    { 
                        settingXY((int)p.getPoint().get(0).getX(),  
                                  (int)p.getPoint().get(0).getY(), 
                                  (int)p.getPoint().get(1).getX(), 
                                  (int)p.getPoint().get(1).getY()); 
                      
                        if(p.getFill()) 
                            g.fillOval(x1, y1, x2 - x1, y2 - y1); 
                        else g.drawOval(x1, y1, x2 - x1, y2 - y1); 
                    }  
                    break; 
                    case 3:     // draw rectangle 
                    { 
                        settingXY((int)p.getPoint().get(0).getX(),  
                                (int)p.getPoint().get(0).getY(), 
                                (int)p.getPoint().get(1).getX(), 
                                (int)p.getPoint().get(1).getY()); 
                    
                        if(p.getFill()) 
                            g.fillRect(x1, y1, x2 - x1, y2 - y1); 
                        else g.drawRect(x1, y1, x2 - x1, y2 - y1); 
                    }  
                    break; 
                    case 4:     // draw polygon 
                    { 
                        int sz = p.getPoint().size(); 
                        int xa[] = new int[sz]; 
                        int ya[] = new int[sz]; 
                        for(int i=0; i<sz;i++) 
                        { 
                            xa[i] = (int)p.getPoint().get(i).getX(); 
                            ya[i] = (int)p.getPoint().get(i).getY(); 
                        } 
                        if(p.getFill()) 
                        { 
                            g.fillPolygon(xa, ya, sz); 
                        } 
                        else g.drawPolygon(xa, ya, sz); 
                    } 
                    break; 
                    case 5:     // eraser head 
                    { 
                        g.setColor(BCKGRND_COLOR); 
                        g.fillRect((int)p.getPoint().get(0).getX(),  
                                   (int)p.getPoint().get(0).getY(),  
                                   ERASER_SIZE, ERASER_SIZE); 
                        g.setColor(clrUse); 
                    } 
                    break; 
                    default:     // brush string 
                    { 
                        g.drawString(p.getBrushP(),  
                                     (int)p.getPoint().get(0).getX(),  
                                     (int)p.getPoint().get(0).getY()); 
                    } 
                } 
            }            
        } 
    } 
     
    // ************************ drawScreenItems() ***************************** 
    public void drawScreenItems(Graphics g) 
    { 
        g.setColor(clrUse); 
        if(points.size() >0 && x>0 && y>0) 
        { 
            switch(shapeDraw) 
            { 
                case 1: 
                { 
                    g.drawLine((int)points.get(0).getX(),  
                               (int)points.get(0).getY(), x, y); 
                } 
                break; 
                case 2: 
                { 
                    settingXY((int)points.get(0).getX(),  
                            (int)points.get(0).getY(), x,y); 
                    
                    if(fill) 
                    { 
                        g.fillOval(x1, y1, x2 - x1, y2 - y1); 
                    } 
                    else 
                    { 
                        g.drawOval(x1, y1, x2 - x1, y2 - y1); 
                    } 
                } 
                break; 
                case 3: 
                { 
                    settingXY((int)points.get(0).getX(),  
                            (int)points.get(0).getY(), x,y); 
                
                    if(fill) 
                    { 
                        g.fillRect(x1, y1, x2 - x1, y2 - y1); 
                    } 
                    else g.drawRect(x1, y1, x2 - x1, y2 - y1); 
                } 
                break; 
                case 4: 
                { 
                    int sz = points.size(); 
                    int xa[] = new int[sz]; 
                    int ya[] = new int[sz]; 
                    for(int i=0; i<sz;i++) 
                    { 
                        xa[i] = (int)points.get(i).getX(); 
                        ya[i] = (int)points.get(i).getY(); 
                        g.drawString("X", xa[i]-3, ya[i]+5); 
                    } 
                    if(fill) 
                    { 
                        g.fillPolygon(xa, ya, sz); 
                    } 
                    else g.drawPolygon(xa, ya, sz); 
                } 
                break; 
                default: {} 
            } 
        } 
        repaint(); 
    } 
} 
Page Break 
/** 
 ** Class DrawingPointsObj 
 * Programmer :  Stanley Yee 
 * Course     :  CS211S 
 * Assignment :  #4 version 2 
 * Instructor :  Abbas Moghtanei 
 * Date       :  05/06/13 
 * Objective  :  Part of DrawingBoard. 
 *               Stores Fill or not, Points (X,Y) coordinate of items, Color  
 *               select, Shape selection, and Brush for DrawingBoard. 
 */  
 
import java.awt.*; 
import java.util.*; 
 
//****************************** DrawPointsObj ******************************* 
public class DrawPointsObj implements java.io.Serializable 
{ 
    boolean fillDPO; 
    ArrayList<Point> pointDPO; 
    Color colorDPO; 
    int shapeDPO; 
    String brushDPO; 
     
    // *************************** DrawPointsObj() *************************** 
    public DrawPointsObj(boolean f, ArrayList<? extends Point> p, Color c,  
                         int s, String br) 
    { 
        fillDPO = f; 
        pointDPO = new ArrayList<Point>(p); 
        colorDPO = c; 
        shapeDPO = s; 
        brushDPO = br; 
    } 
     
    // ******************************* getFill() ***************************** 
    public boolean getFill() 
    { 
        return(fillDPO); 
    } 
     
    // ***************************** getPoints() ***************************** 
    public ArrayList<? extends Point> getPoint() 
    { 
        return(pointDPO); 
    } 
     
    // ***************************** getColor() ****************************** 
    public Color getColor() 
    { 
        return(colorDPO); 
    } 
     
    // ***************************** getShape() ****************************** 
    public int getShape() 
    { 
        return(shapeDPO); 
    } 
     
    // ***************************** getBrushP() ***************************** 
    public String getBrushP() 
    { 
        return(brushDPO); 
    } 
} 

